basePath: /
definitions:
  models.CreatePostFailureBadRequestResponse:
    properties:
      error:
        example: invalid post data
        type: string
    type: object
  models.CreatePostFailureInternalServerErrorResponse:
    properties:
      details:
        example: error details if available
        type: string
      error:
        example: post creation failed
        type: string
    type: object
  models.CreatePostFailureUnauthorizedResponse:
    properties:
      error:
        example: invalid credentials
        type: string
    type: object
  models.CreatePostRequest:
    properties:
      content:
        minLength: 10
        type: string
      status:
        enum:
        - draft
        - published
        - archived
        type: string
      title:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - content
    - status
    - title
    type: object
  models.CreatePostSuccessResponse:
    properties:
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.DeletePostFailureBadRequestResponse:
    properties:
      error:
        example: post not found
        type: string
    type: object
  models.DeletePostFailureInternalServerErrorResponse:
    properties:
      details:
        example: error details if available
        type: string
      error:
        example: post delete failed
        type: string
    type: object
  models.DeletePostFailureUnauthorizedResponse:
    properties:
      error:
        example: authorization header missing
        type: string
    type: object
  models.DeletePostSuccessResponse:
    properties:
      message:
        example: post deleted successfully
        type: string
      post_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.GetAllPostsFailureInternalServerErrorResponse:
    properties:
      details:
        example: error details if available
        type: string
      error:
        example: error retrieving posts
        type: string
    type: object
  models.GetAllPostsSuccessResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.GetPostByIDFailureBadRequestResponse:
    properties:
      error:
        example: post not found
        type: string
    type: object
  models.GetPostByIDFailureInternalServerErrorResponse:
    properties:
      details:
        example: error details if available
        type: string
      error:
        example: error retrieving post
        type: string
    type: object
  models.GetPostByIDSuccessResponse:
    properties:
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.GetPostStatusesFailureInternalServerErrorResponse:
    properties:
      error:
        example: could not fetch post statuses
        type: string
    type: object
  models.GetPostStatusesSuccessResponse:
    properties:
      statuses:
        items:
          $ref: '#/definitions/models.PostStatus'
        type: array
    type: object
  models.GetUserProfileFailureInternalServerErrorResponse:
    properties:
      error:
        example: failed to retrieve user profile
        type: string
    type: object
  models.GetUserProfileFailureUnauthorizedResponse:
    properties:
      error:
        example: user not authenticated
        type: string
    type: object
  models.GetUserProfileSuccessResponse:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.Role'
        example: user
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.Post:
    properties:
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.PostStatus:
    properties:
      id:
        example: 1
        type: integer
      label:
        example: Draft
        type: string
      value:
        example: draft
        type: string
    type: object
  models.Role:
    enum:
    - user
    - author
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAuthor
    - RoleAdmin
  models.UpdatePostFailureBadRequestResponse:
    properties:
      error:
        example: invalid post data
        type: string
    type: object
  models.UpdatePostFailureInternalServerErrorResponse:
    properties:
      details:
        example: error details if available
        type: string
      error:
        example: post update failed
        type: string
    type: object
  models.UpdatePostFailureUnauthorizedResponse:
    properties:
      error:
        example: invalid credentials
        type: string
    type: object
  models.UpdatePostRequest:
    properties:
      content:
        minLength: 10
        type: string
      status:
        enum:
        - draft
        - published
        - archived
        type: string
      title:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - status
    type: object
  models.UpdatePostSuccessResponse:
    properties:
      message:
        example: post updated successfully
        type: string
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.UserLoginFailureBadRequestResponse:
    properties:
      error:
        example: invalid login data
        type: string
    type: object
  models.UserLoginFailureInternalServerErrorResponse:
    properties:
      error:
        example: login process failed
        type: string
    type: object
  models.UserLoginFailureUnauthorizedResponse:
    properties:
      error:
        example: invalid credentials
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.UserLoginSuccessResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  models.UserLogoutFailureUnauthorizedResponse:
    properties:
      error:
        example: invalid or expired token
        type: string
    type: object
  models.UserLogoutSuccessResponse:
    properties:
      instructions:
        example: Please remove the token from your client storage
        type: string
      message:
        example: Successfully logged out
        type: string
    type: object
  models.UserRefreshTokenFailureServerErrorResponse:
    properties:
      error:
        example: token refresh failed
        type: string
    type: object
  models.UserRefreshTokenFailureUnauthorizedResponse:
    properties:
      error:
        example: invalid or expired token
        type: string
    type: object
  models.UserRefreshTokenSuccessResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  models.UserRegisterFailureBadRequestResponse:
    properties:
      details:
        type: string
      error:
        example: invalid input format
        type: string
    type: object
  models.UserRegisterFailureConflictResponse:
    properties:
      error:
        example: email already registered
        type: string
    type: object
  models.UserRegisterFailureInternalServerErrorResponse:
    properties:
      error:
        example: password processing failed
        type: string
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserRegisterSuccessResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: your.email@example.com
    name: Roman
  description: API for a blog platform built with Go, Gin, GORM, JWT
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: ProBlog API
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserLoginSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.UserLoginFailureBadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UserLoginFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.UserLoginFailureInternalServerErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/logout:
    post:
      description: Logout user and invalidate tokens on client side
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserLogoutSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UserLogoutFailureUnauthorizedResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - auth
  /api/v1/posts:
    get:
      description: Retrieve all blog posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllPostsSuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetAllPostsFailureInternalServerErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a post by an authenticated user
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreatePostSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.CreatePostFailureBadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.CreatePostFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.CreatePostFailureInternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new blog post
      tags:
      - posts
  /api/v1/posts/{id}:
    delete:
      description: Delete a blog post by its ID
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeletePostSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DeletePostFailureBadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.DeletePostFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.DeletePostFailureInternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete post
      tags:
      - posts
    get:
      description: Retrieve a post by its UUID
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetPostByIDSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetPostByIDFailureBadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetPostByIDFailureInternalServerErrorResponse'
      summary: Get post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post by its ID
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdatePostSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.UpdatePostFailureBadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UpdatePostFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.UpdatePostFailureInternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing blog post
      tags:
      - posts
  /api/v1/posts/statuses:
    get:
      consumes:
      - application/json
      description: Returns all possible statuses a post may have (draft, published,
        archived, etc.)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetPostStatusesSuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetPostStatusesFailureInternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List available post statuses
      tags:
      - posts
  /api/v1/profile:
    get:
      description: Retrieve logged-in user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserProfileSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GetUserProfileFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetUserProfileFailureInternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /api/v1/refresh-token:
    post:
      description: Generate a new JWT token using a valid refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRefreshTokenSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UserRefreshTokenFailureUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.UserRefreshTokenFailureServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRegisterSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.UserRegisterFailureBadRequestResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.UserRegisterFailureConflictResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.UserRegisterFailureInternalServerErrorResponse'
      summary: Register new user
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
